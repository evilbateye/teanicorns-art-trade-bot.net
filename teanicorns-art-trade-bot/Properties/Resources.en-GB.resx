<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="REF_REVEAL_FINAL" xml:space="preserve">
    <value>&lt;@{0}&gt; `{1}` made you some art!</value>
  </data>
  <data name="REF_REVEAL_NOTIFY" xml:space="preserve">
    <value>thanks &lt;@{0}&gt;! a notification was sent to &lt;@{1}&gt;</value>
  </data>
  <data name="REF_TRADE_PARTNER" xml:space="preserve">
    <value>&lt;@{0}&gt; your partner is `{1}` , good luck!</value>
  </data>
  <data name="GLOBAL_SUCCESS" xml:space="preserve">
    <value>&lt;@{0}&gt; request done, {1}</value>
  </data>
  <data name="TRADE_ENDS_ON" xml:space="preserve">
    <value>trade will be ending in `{0}` days on `{1}`</value>
  </data>
  <data name="GLOBAL_IN_PROGRESS" xml:space="preserve">
    <value>&lt;@{0}&gt; {1} is already in progress</value>
  </data>
  <data name="TRADE_LIST_SETTINGS" xml:space="preserve">
    <value>channel: `{0}`
trade from `{1}` to `{2}` (`{3}` days)
flags: `{4}`
end forced: `{5}`</value>
  </data>
  <data name="ENTRY_WEEK" xml:space="preserve">
    <value>**Entry Week**
@everyone the `entry week` started, `I'm accepting new entries!`
please use `{0}{1}`  to register or use `{0}{2}` if you need more info</value>
  </data>
  <data name="TRADE_MONTH" xml:space="preserve">
    <value>**Trade Month**
@everyone the `trade month` started, `I'm no longer accepting new entries!`
please use `{0}{1}` to register your finished art or use `{0}{2}` if you need more info</value>
  </data>
  <data name="TRADE_THIS_THEME" xml:space="preserve">
    <value>this month's art trade theme is `{0}`</value>
  </data>
  <data name="GLOBAL_ERROR" xml:space="preserve">
    <value>&lt;@{0}&gt; something went wrong, {1}</value>
  </data>
  <data name="GOOGLE_TRADE_ENDING_SOON" xml:space="preserve">
    <value>@everyone `art trade` ends {0}</value>
  </data>
  <data name="TRADE_ART_LATE_DM" xml:space="preserve">
    <value>&lt;@{0}&gt; this month's `{1}` themed trade ended, but I'm still missing your art, please send me your art soon</value>
  </data>
  <data name="REF_TRADE_LAST_MONTH_ART_MISSING" xml:space="preserve">
    <value>&lt;@{0}&gt; you didn't send me the art for the previous trade (`{1}`), I'm sorry but I'm not supposed to let you enter this month</value>
  </data>
  <data name="GOOGLE_TRADE_ENDING_NOW" xml:space="preserve">
    <value>@everyone the **trade** is ending, please send me your art using the `{0}{1}` command or use `{0}{2}` if you need more info</value>
  </data>
  <data name="INFO_INTRO" xml:space="preserve">
    <value>my name is Bottie the art trade bot and I'm written in Discord.Net {0}
for more info about a specific command please type `{1}{2}` followed by the command name at the end for example `{1}{2} {3}`
you can type it to this channel or send me a direct message</value>
  </data>
  <data name="GLOBAL_UNKNOW_ARG" xml:space="preserve">
    <value>&lt;@{0}&gt; unknown or missing command argument</value>
  </data>
  <data name="TRADE_LIST_ONOFF" xml:space="preserve">
    <value>`{0}` is currently active</value>
  </data>
  <data name="TRADE_THEME_POOL_START" xml:space="preserve">
    <value>**Trade Poll**
@everyone please choose which theme you'd like for this month's art trade, the `theme with the most votes wins!`</value>
  </data>
  <data name="GLOBAL_DUPLICAT_ARG" xml:space="preserve">
    <value>&lt;@{0}&gt; there already is {1} with this name registered</value>
  </data>
  <data name="TRADE_THEME_POOL_SUBS" xml:space="preserve">
    <value>`{0}` is currently taking place in `{1}` channel</value>
  </data>
  <data name="GLOBAL_MAX_NUM_OF_ARGS" xml:space="preserve">
    <value>&lt;@{0}&gt; maximum number of {1} reached</value>
  </data>
  <data name="GLOBAL_CMDHELP" xml:space="preserve">
    <value>you can use the `{0}{1}` to {2}</value>
  </data>
  <data name="GLOBAL_EMPTY" xml:space="preserve">
    <value>there are no {0} registered at the moment</value>
  </data>
  <data name="GLOBAL_ITEM_NOT_FOUND" xml:space="preserve">
    <value>&lt;@{0}&gt; I couldn't find your {1}</value>
  </data>
  <data name="GLOBAL_MISSING_INPUT" xml:space="preserve">
    <value>&lt;@{0}&gt; I need {1}, please send me again</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>please use the `{1}{2}` command if you wish to reply, here is the message: {3}</value>
  </data>
  <data name="TRADE_ECHO" xml:space="preserve">
    <value>&lt;@{0}&gt; I'm sending you a message from your secret trade partner in his stead</value>
  </data>
</root>